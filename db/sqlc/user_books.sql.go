// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user_books.sql

package db

import (
	"context"
	"database/sql"
)

const addUserBooks = `-- name: AddUserBooks :one
INSERT INTO user_books (
    user_id,
    book_id,
    purchase_date
) VALUES (
    $1,$2,$3
) RETURNING id, user_id, book_id, created_at, purchase_date, book_return_date
`

type AddUserBooksParams struct {
	UserID       int64        `json:"user_id"`
	BookID       int64        `json:"book_id"`
	PurchaseDate sql.NullTime `json:"purchase_date"`
}

func (q *Queries) AddUserBooks(ctx context.Context, arg AddUserBooksParams) (UserBooks, error) {
	row := q.db.QueryRowContext(ctx, addUserBooks, arg.UserID, arg.BookID, arg.PurchaseDate)
	var i UserBooks
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.CreatedAt,
		&i.PurchaseDate,
		&i.BookReturnDate,
	)
	return i, err
}

const updateUserBooks = `-- name: UpdateUserBooks :one
UPDATE user_books
SET book_return_date = $3
WHERE user_id = $1 and book_id=$2
RETURNING id, user_id, book_id, created_at, purchase_date, book_return_date
`

type UpdateUserBooksParams struct {
	UserID         int64        `json:"user_id"`
	BookID         int64        `json:"book_id"`
	BookReturnDate sql.NullTime `json:"book_return_date"`
}

func (q *Queries) UpdateUserBooks(ctx context.Context, arg UpdateUserBooksParams) (UserBooks, error) {
	row := q.db.QueryRowContext(ctx, updateUserBooks, arg.UserID, arg.BookID, arg.BookReturnDate)
	var i UserBooks
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.CreatedAt,
		&i.PurchaseDate,
		&i.BookReturnDate,
	)
	return i, err
}
