// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: book.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const availableBooks = `-- name: AvailableBooks :many
SELECT 
b.id,
b.book_name,
b.book_desc,
b.author_id,
b.publish_date 
FROM book as b 
INNER JOIN book_managment as bm 
ON b.id = bm.book_id
WHERE bm.total_in_lab > 0
ORDER BY b.id
`

type AvailableBooksRow struct {
	ID          int64     `json:"id"`
	BookName    string    `json:"book_name"`
	BookDesc    string    `json:"book_desc"`
	AuthorID    int64     `json:"author_id"`
	PublishDate time.Time `json:"publish_date"`
}

func (q *Queries) AvailableBooks(ctx context.Context) ([]AvailableBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, availableBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AvailableBooksRow{}
	for rows.Next() {
		var i AvailableBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.BookName,
			&i.BookDesc,
			&i.AuthorID,
			&i.PublishDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const bookWithAuthor = `-- name: BookWithAuthor :one
SELECT b.id, book_name, book_desc, author_id, for_this, publish_date, b.created_at, a.id, author_name, author_address, a.created_at FROM book as b 
INNER JOIN author as a 
ON b.author_id = a.id
WHERE b.id = $1
`

type BookWithAuthorRow struct {
	ID            int64          `json:"id"`
	BookName      string         `json:"book_name"`
	BookDesc      string         `json:"book_desc"`
	AuthorID      int64          `json:"author_id"`
	ForThis       sql.NullString `json:"for_this"`
	PublishDate   time.Time      `json:"publish_date"`
	CreatedAt     time.Time      `json:"created_at"`
	ID_2          int64          `json:"id_2"`
	AuthorName    string         `json:"author_name"`
	AuthorAddress string         `json:"author_address"`
	CreatedAt_2   time.Time      `json:"created_at_2"`
}

func (q *Queries) BookWithAuthor(ctx context.Context, id int64) (BookWithAuthorRow, error) {
	row := q.db.QueryRowContext(ctx, bookWithAuthor, id)
	var i BookWithAuthorRow
	err := row.Scan(
		&i.ID,
		&i.BookName,
		&i.BookDesc,
		&i.AuthorID,
		&i.ForThis,
		&i.PublishDate,
		&i.CreatedAt,
		&i.ID_2,
		&i.AuthorName,
		&i.AuthorAddress,
		&i.CreatedAt_2,
	)
	return i, err
}

const createBook = `-- name: CreateBook :one
INSERT INTO book (
    book_name,
    book_desc,
    author_id,
    publish_date
) VALUES (
    $1,$2,$3,$4
) RETURNING id, book_name, book_desc, author_id, for_this, publish_date, created_at
`

type CreateBookParams struct {
	BookName    string    `json:"book_name"`
	BookDesc    string    `json:"book_desc"`
	AuthorID    int64     `json:"author_id"`
	PublishDate time.Time `json:"publish_date"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.BookName,
		arg.BookDesc,
		arg.AuthorID,
		arg.PublishDate,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.BookName,
		&i.BookDesc,
		&i.AuthorID,
		&i.ForThis,
		&i.PublishDate,
		&i.CreatedAt,
	)
	return i, err
}

const getBook = `-- name: GetBook :one
SELECT id, book_name, book_desc, author_id, for_this, publish_date, created_at FROM book
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.BookName,
		&i.BookDesc,
		&i.AuthorID,
		&i.ForThis,
		&i.PublishDate,
		&i.CreatedAt,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, book_name, book_desc, author_id, for_this, publish_date, created_at FROM book
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetBooks(ctx context.Context, arg GetBooksParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.BookName,
			&i.BookDesc,
			&i.AuthorID,
			&i.ForThis,
			&i.PublishDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewBooks = `-- name: GetNewBooks :many
SELECT id, book_name, book_desc, author_id, for_this, publish_date, created_at FROM book
ORDER BY id
`

func (q *Queries) GetNewBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getNewBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.BookName,
			&i.BookDesc,
			&i.AuthorID,
			&i.ForThis,
			&i.PublishDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const purchaseBook = `-- name: PurchaseBook :one
UPDATE book_managment
SET total_in_lab = total_in_lab - 1,
total_out_lab = total_out_lab + 1
WHERE book_id = $1
RETURNING id, book_id, total_quantity, total_in_lab, total_out_lab, created_at
`

func (q *Queries) PurchaseBook(ctx context.Context, bookID int64) (BookManagment, error) {
	row := q.db.QueryRowContext(ctx, purchaseBook, bookID)
	var i BookManagment
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.TotalQuantity,
		&i.TotalInLab,
		&i.TotalOutLab,
		&i.CreatedAt,
	)
	return i, err
}

const updateBook = `-- name: UpdateBook :one
UPDATE book
SET book_desc = $2
WHERE id = $1
RETURNING id, book_name, book_desc, author_id, for_this, publish_date, created_at
`

type UpdateBookParams struct {
	ID       int64  `json:"id"`
	BookDesc string `json:"book_desc"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook, arg.ID, arg.BookDesc)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.BookName,
		&i.BookDesc,
		&i.AuthorID,
		&i.ForThis,
		&i.PublishDate,
		&i.CreatedAt,
	)
	return i, err
}
