// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_name,
    user_email,
    user_password
) VALUES (
    $1,$2,$3
) RETURNING id, user_name, user_email, user_password, created_at
`

type CreateUserParams struct {
	UserName     string `json:"user_name"`
	UserEmail    string `json:"user_email"`
	UserPassword string `json:"user_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.UserName, arg.UserEmail, arg.UserPassword)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserEmail,
		&i.UserPassword,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, user_name, user_email, user_password, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserEmail,
		&i.UserPassword,
		&i.CreatedAt,
	)
	return i, err
}

const getUserWithBooks = `-- name: GetUserWithBooks :many
SELECT u.id, user_name, user_email, user_password, u.created_at, ub.id, user_id, book_id, ub.created_at, purchase_date, book_return_date, b.id, book_name, book_desc, b.author_id, for_this, publish_date, b.created_at, a.id, author_name, author_address, a.created_at, ad.id, address_line_one, city, state, country, ad.author_id, ad.created_at FROM users as u
INNER JOIN user_books as ub 
ON u.id = ub.user_id
INNER JOIN book as b
ON ub.book_id = b.id
RIGHT JOIN author as a 
ON b.author_id = a.id
LEFT JOIN  author_address as ad 
ON a.id = ad.author_id
WHERE u.id = $1
`

type GetUserWithBooksRow struct {
	ID             int64          `json:"id"`
	UserName       string         `json:"user_name"`
	UserEmail      string         `json:"user_email"`
	UserPassword   string         `json:"user_password"`
	CreatedAt      time.Time      `json:"created_at"`
	ID_2           int64          `json:"id_2"`
	UserID         int64          `json:"user_id"`
	BookID         int64          `json:"book_id"`
	CreatedAt_2    time.Time      `json:"created_at_2"`
	PurchaseDate   sql.NullTime   `json:"purchase_date"`
	BookReturnDate sql.NullTime   `json:"book_return_date"`
	ID_3           int64          `json:"id_3"`
	BookName       string         `json:"book_name"`
	BookDesc       string         `json:"book_desc"`
	AuthorID       int64          `json:"author_id"`
	ForThis        sql.NullString `json:"for_this"`
	PublishDate    time.Time      `json:"publish_date"`
	CreatedAt_3    time.Time      `json:"created_at_3"`
	ID_4           int64          `json:"id_4"`
	AuthorName     string         `json:"author_name"`
	AuthorAddress  string         `json:"author_address"`
	CreatedAt_4    time.Time      `json:"created_at_4"`
	ID_5           sql.NullInt64  `json:"id_5"`
	AddressLineOne sql.NullString `json:"address_line_one"`
	City           sql.NullString `json:"city"`
	State          sql.NullString `json:"state"`
	Country        sql.NullString `json:"country"`
	AuthorID_2     sql.NullInt64  `json:"author_id_2"`
	CreatedAt_5    sql.NullTime   `json:"created_at_5"`
}

func (q *Queries) GetUserWithBooks(ctx context.Context, id int64) ([]GetUserWithBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserWithBooks, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserWithBooksRow{}
	for rows.Next() {
		var i GetUserWithBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.UserEmail,
			&i.UserPassword,
			&i.CreatedAt,
			&i.ID_2,
			&i.UserID,
			&i.BookID,
			&i.CreatedAt_2,
			&i.PurchaseDate,
			&i.BookReturnDate,
			&i.ID_3,
			&i.BookName,
			&i.BookDesc,
			&i.AuthorID,
			&i.ForThis,
			&i.PublishDate,
			&i.CreatedAt_3,
			&i.ID_4,
			&i.AuthorName,
			&i.AuthorAddress,
			&i.CreatedAt_4,
			&i.ID_5,
			&i.AddressLineOne,
			&i.City,
			&i.State,
			&i.Country,
			&i.AuthorID_2,
			&i.CreatedAt_5,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT id, user_name, user_email, user_password, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]Users, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.UserEmail,
			&i.UserPassword,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET user_name = $2
WHERE id = $1
RETURNING id, user_name, user_email, user_password, created_at
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	UserName string `json:"user_name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.UserName)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.UserEmail,
		&i.UserPassword,
		&i.CreatedAt,
	)
	return i, err
}
