// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: book_management.sql

package db

import (
	"context"
)

const createBookManagment = `-- name: CreateBookManagment :one
INSERT INTO book_managment(
    book_id,
    total_quantity,
    total_in_lab,
    total_out_lab
) VALUES (
    $1,$2,$3,$4
) RETURNING id, book_id, total_quantity, total_in_lab, total_out_lab, created_at
`

type CreateBookManagmentParams struct {
	BookID        int64 `json:"book_id"`
	TotalQuantity int32 `json:"total_quantity"`
	TotalInLab    int32 `json:"total_in_lab"`
	TotalOutLab   int32 `json:"total_out_lab"`
}

func (q *Queries) CreateBookManagment(ctx context.Context, arg CreateBookManagmentParams) (BookManagment, error) {
	row := q.db.QueryRowContext(ctx, createBookManagment,
		arg.BookID,
		arg.TotalQuantity,
		arg.TotalInLab,
		arg.TotalOutLab,
	)
	var i BookManagment
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.TotalQuantity,
		&i.TotalInLab,
		&i.TotalOutLab,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBookManagment = `-- name: DeleteBookManagment :exec
DELETE FROM book_managment
WHERE id = $1
`

func (q *Queries) DeleteBookManagment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBookManagment, id)
	return err
}

const getBookManagment = `-- name: GetBookManagment :one
SELECT id, book_id, total_quantity, total_in_lab, total_out_lab, created_at FROM book_managment
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBookManagment(ctx context.Context, id int64) (BookManagment, error) {
	row := q.db.QueryRowContext(ctx, getBookManagment, id)
	var i BookManagment
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.TotalQuantity,
		&i.TotalInLab,
		&i.TotalOutLab,
		&i.CreatedAt,
	)
	return i, err
}

const getBookManagmentByBookID = `-- name: GetBookManagmentByBookID :one
SELECT id, book_id, total_quantity, total_in_lab, total_out_lab, created_at FROM book_managment
WHERE book_id = $1 LIMIT 1
`

func (q *Queries) GetBookManagmentByBookID(ctx context.Context, bookID int64) (BookManagment, error) {
	row := q.db.QueryRowContext(ctx, getBookManagmentByBookID, bookID)
	var i BookManagment
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.TotalQuantity,
		&i.TotalInLab,
		&i.TotalOutLab,
		&i.CreatedAt,
	)
	return i, err
}

const getBookManagments = `-- name: GetBookManagments :many
SELECT id, book_id, total_quantity, total_in_lab, total_out_lab, created_at FROM book_managment
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetBookManagmentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetBookManagments(ctx context.Context, arg GetBookManagmentsParams) ([]BookManagment, error) {
	rows, err := q.db.QueryContext(ctx, getBookManagments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BookManagment{}
	for rows.Next() {
		var i BookManagment
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.TotalQuantity,
			&i.TotalInLab,
			&i.TotalOutLab,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookManagment = `-- name: UpdateBookManagment :one
UPDATE book_managment
SET total_quantity = $2, total_in_lab=$3, total_out_lab = $4
WHERE id = $1
RETURNING id, book_id, total_quantity, total_in_lab, total_out_lab, created_at
`

type UpdateBookManagmentParams struct {
	ID            int64 `json:"id"`
	TotalQuantity int32 `json:"total_quantity"`
	TotalInLab    int32 `json:"total_in_lab"`
	TotalOutLab   int32 `json:"total_out_lab"`
}

func (q *Queries) UpdateBookManagment(ctx context.Context, arg UpdateBookManagmentParams) (BookManagment, error) {
	row := q.db.QueryRowContext(ctx, updateBookManagment,
		arg.ID,
		arg.TotalQuantity,
		arg.TotalInLab,
		arg.TotalOutLab,
	)
	var i BookManagment
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.TotalQuantity,
		&i.TotalInLab,
		&i.TotalOutLab,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserBookManagment = `-- name: UpdateUserBookManagment :one
UPDATE book_managment
SET total_in_lab = total_in_lab + 1,
total_out_lab = total_out_lab - 1
WHERE book_id = $1 AND 
total_quantity > total_out_lab
RETURNING id, book_id, total_quantity, total_in_lab, total_out_lab, created_at
`

func (q *Queries) UpdateUserBookManagment(ctx context.Context, bookID int64) (BookManagment, error) {
	row := q.db.QueryRowContext(ctx, updateUserBookManagment, bookID)
	var i BookManagment
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.TotalQuantity,
		&i.TotalInLab,
		&i.TotalOutLab,
		&i.CreatedAt,
	)
	return i, err
}
