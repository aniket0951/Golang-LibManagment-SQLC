// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: author.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO author(
    author_name,
    author_address
) VALUES (
    $1,$2
) RETURNING id, author_name, author_address, created_at
`

type CreateAuthorParams struct {
	AuthorName    string `json:"author_name"`
	AuthorAddress string `json:"author_address"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.AuthorName, arg.AuthorAddress)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.AuthorName,
		&i.AuthorAddress,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM author
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, author_name, author_address, created_at FROM author
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.AuthorName,
		&i.AuthorAddress,
		&i.CreatedAt,
	)
	return i, err
}

const getAuthorWithBooks = `-- name: GetAuthorWithBooks :many
SELECT a.id, author_name, author_address, a.created_at, b.id, book_name, book_desc, author_id, for_this, publish_date, b.created_at FROM author AS a 
INNER JOIN book AS B 
ON a.id = b.author_id
WHERE a.id = $1
`

type GetAuthorWithBooksRow struct {
	ID            int64          `json:"id"`
	AuthorName    string         `json:"author_name"`
	AuthorAddress string         `json:"author_address"`
	CreatedAt     time.Time      `json:"created_at"`
	ID_2          int64          `json:"id_2"`
	BookName      string         `json:"book_name"`
	BookDesc      string         `json:"book_desc"`
	AuthorID      int64          `json:"author_id"`
	ForThis       sql.NullString `json:"for_this"`
	PublishDate   time.Time      `json:"publish_date"`
	CreatedAt_2   time.Time      `json:"created_at_2"`
}

func (q *Queries) GetAuthorWithBooks(ctx context.Context, id int64) ([]GetAuthorWithBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAuthorWithBooks, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAuthorWithBooksRow{}
	for rows.Next() {
		var i GetAuthorWithBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.AuthorName,
			&i.AuthorAddress,
			&i.CreatedAt,
			&i.ID_2,
			&i.BookName,
			&i.BookDesc,
			&i.AuthorID,
			&i.ForThis,
			&i.PublishDate,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuthorWithBooksAndManagment = `-- name: GetAuthorWithBooksAndManagment :many
SELECT DISTINCT a.id, author_name, author_address, a.created_at, b.id, book_name, book_desc, author_id, for_this, publish_date, b.created_at, bm.id, book_id, total_quantity, total_in_lab, total_out_lab, bm.created_at  FROM author AS a
INNER JOIN book AS b
ON a.id = b.author_id
LEFT JOIN book_managment AS bm 
ON b.id = bm.book_id
WHERE a.id = $1
`

type GetAuthorWithBooksAndManagmentRow struct {
	ID            int64          `json:"id"`
	AuthorName    string         `json:"author_name"`
	AuthorAddress string         `json:"author_address"`
	CreatedAt     time.Time      `json:"created_at"`
	ID_2          int64          `json:"id_2"`
	BookName      string         `json:"book_name"`
	BookDesc      string         `json:"book_desc"`
	AuthorID      int64          `json:"author_id"`
	ForThis       sql.NullString `json:"for_this"`
	PublishDate   time.Time      `json:"publish_date"`
	CreatedAt_2   time.Time      `json:"created_at_2"`
	ID_3          sql.NullInt64  `json:"id_3"`
	BookID        sql.NullInt64  `json:"book_id"`
	TotalQuantity sql.NullInt32  `json:"total_quantity"`
	TotalInLab    sql.NullInt32  `json:"total_in_lab"`
	TotalOutLab   sql.NullInt32  `json:"total_out_lab"`
	CreatedAt_3   sql.NullTime   `json:"created_at_3"`
}

func (q *Queries) GetAuthorWithBooksAndManagment(ctx context.Context, id int64) ([]GetAuthorWithBooksAndManagmentRow, error) {
	rows, err := q.db.QueryContext(ctx, getAuthorWithBooksAndManagment, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAuthorWithBooksAndManagmentRow{}
	for rows.Next() {
		var i GetAuthorWithBooksAndManagmentRow
		if err := rows.Scan(
			&i.ID,
			&i.AuthorName,
			&i.AuthorAddress,
			&i.CreatedAt,
			&i.ID_2,
			&i.BookName,
			&i.BookDesc,
			&i.AuthorID,
			&i.ForThis,
			&i.PublishDate,
			&i.CreatedAt_2,
			&i.ID_3,
			&i.BookID,
			&i.TotalQuantity,
			&i.TotalInLab,
			&i.TotalOutLab,
			&i.CreatedAt_3,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuthors = `-- name: GetAuthors :many
SELECT id, author_name, author_address, created_at FROM author
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAuthorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAuthors(ctx context.Context, arg GetAuthorsParams) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, getAuthors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Author{}
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.AuthorName,
			&i.AuthorAddress,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE author
SET author_name = $2, author_address = $3
WHERE id = $1
RETURNING id, author_name, author_address, created_at
`

type UpdateAuthorParams struct {
	ID            int64  `json:"id"`
	AuthorName    string `json:"author_name"`
	AuthorAddress string `json:"author_address"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, updateAuthor, arg.ID, arg.AuthorName, arg.AuthorAddress)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.AuthorName,
		&i.AuthorAddress,
		&i.CreatedAt,
	)
	return i, err
}
